#!/usr/bin/env python3
"""
Complete Container Logs Demo
This test creates a repository with a template and then tests container logs functionality
"""

import re
import time
import sys
from pathlib import Path
from playwright.sync_api import Playwright, sync_playwright, expect


def run(playwright: Playwright) -> None:
    """Main test execution"""
    browser = None
    context = None
    
    try:
        print("Starting Complete Container Logs Demo...")
        
        # Create screenshots directory
        screenshots_dir = Path("artifacts/screenshots")
        screenshots_dir.mkdir(parents=True, exist_ok=True)
        
        # Launch browser
        browser = playwright.chromium.launch(headless=False)
        context = browser.new_context(viewport={'width': 1440, 'height': 900})
        page = context.new_page()
        
        # Set reasonable timeout
        page.set_default_timeout(30000)
        
        # Step 1: Login
        print("\n=== STEP 1: Login ===")
        page.goto("http://localhost:7322/console")
        page.wait_for_load_state("domcontentloaded")
        
        current_url = page.url
        print(f"Current URL: {current_url}")
        
        if '/login' in current_url or 'signin' in current_url or current_url.endswith('/console/'):
            print("Performing login...")
            
            # Fill login form
            email_selectors = ['[data-testid="login-email-input"]', 'input[type="email"]', 'input[placeholder*="email" i]']
            for selector in email_selectors:
                try:
                    email_input = page.locator(selector).first
                    if email_input.is_visible():\n                        email_input.fill("admin@rediacc.io")\n                        break\n                except:\n                    continue\n            \n            password_selectors = ['[data-testid="login-password-input"]', 'input[type="password"]']\n            for selector in password_selectors:\n                try:\n                    password_input = page.locator(selector).first\n                    if password_input.is_visible():\n                        password_input.fill("admin")\n                        break\n                except:\n                    continue\n            \n            submit_selectors = ['[data-testid="login-submit-button"]', 'button[type="submit"]', 'button:has-text("Sign In")']\n            for selector in submit_selectors:\n                try:\n                    submit_button = page.locator(selector).first\n                    if submit_button.is_visible():\n                        submit_button.click()\n                        break\n                except:\n                    continue\n            \n            page.wait_for_url("**/console/dashboard", timeout=10000)\n            print("✅ Login successful!")\n        \n        # Step 2: Navigate to Resources\n        print("\\n=== STEP 2: Navigate to Resources ===")\n        resources_link = page.get_by_test_id("main-nav-resources").get_by_text("Resources")\n        resources_link.click()\n        page.wait_for_load_state("networkidle")\n        time.sleep(3)\n        \n        page.screenshot(path=str(screenshots_dir / "01_resources_page.png"))\n        print("Screenshot: 01_resources_page.png")\n        \n        # Step 3: Create a repository with a template\n        print("\\n=== STEP 3: Create Repository with Template ===")\n        \n        # Click on machine remote button to create repository\n        try:\n            machine_remote = page.get_by_test_id("machine-remote-rediacc11")\n            if machine_remote.is_visible():\n                print("Clicking machine remote button for rediacc11...")\n                machine_remote.click()\n                time.sleep(1)\n                \n                # Click Create Repo from context menu\n                create_repo_option = page.get_by_text("Create Repo")\n                if create_repo_option.is_visible():\n                    print("Clicking Create Repo...")\n                    create_repo_option.click()\n                    \n                    # Wait for modal to open\n                    page.wait_for_selector('[role="dialog"]', state="visible", timeout=10000)\n                    print("Repository creation modal opened")\n                    \n                    # Fill repository details\n                    repo_name = f"test_logs_{int(time.time())}"\n                    print(f"Repository name: {repo_name}")\n                    \n                    repo_name_input = page.get_by_test_id("resource-modal-field-repositoryName-input")\n                    repo_name_input.fill(repo_name)\n                    \n                    # Set repository size\n                    size_input = page.get_by_test_id("resource-modal-field-size-size-input")\n                    size_input.clear()\n                    size_input.fill("10")\n                    print("Set repository size to 10GB")\n                    \n                    # Select Nginx template (which will have containers)\n                    print("Selecting Nginx template...")\n                    template_button = page.get_by_role("button", name="collapsed appstore Select")\n                    if template_button.is_visible():\n                        template_button.click()\n                        time.sleep(1)\n                        \n                        # Look for Nginx template\n                        nginx_template = page.locator('text=NginxMinimal Nginx web server')\n                        if nginx_template.is_visible():\n                            nginx_template.click()\n                            print("Selected Nginx template")\n                            \n                            # Collapse template selector\n                            template_button_expanded = page.get_by_role("button", name="expanded appstore Select")\n                            if template_button_expanded.is_visible():\n                                template_button_expanded.click()\n                    \n                    # Take screenshot before creating\n                    page.screenshot(path=str(screenshots_dir / "02_repo_creation_form.png"))\n                    print("Screenshot: 02_repo_creation_form.png")\n                    \n                    # Click Create button\n                    print("Creating repository...")\n                    create_button = page.get_by_test_id("resource-modal-ok-button")\n                    create_button.click()\n                    \n                    # Wait for Queue Item Trace dialog\n                    print("Waiting for repository creation to complete...")\n                    try:\n                        page.wait_for_selector('[role="dialog"]:has-text("Queue Item Trace")', \n                                               state="visible", \n                                               timeout=30000)\n                        print("Queue Item Trace dialog opened")\n                        \n                        # Wait for completion\n                        success_alert = page.wait_for_selector(\n                            '.ant-alert-success:has-text("Task Completed Successfully")', \n                            state="visible", \n                            timeout=120000  # 2 minutes for repo creation\n                        )\n                        \n                        if success_alert:\n                            print("✅ Repository created successfully!")\n                            \n                            # Close the trace dialog\n                            close_button = page.locator('button:has-text("Close")').last\n                            if close_button.is_visible():\n                                close_button.click()\n                                print("Closed Queue Item Trace dialog")\n                                \n                            time.sleep(3)  # Wait for UI to update\n                            \n                            page.screenshot(path=str(screenshots_dir / "03_repo_created.png"))\n                            print("Screenshot: 03_repo_created.png")\n                            \n                        else:\n                            print("⚠️ Repository creation completed but success message not clear")\n                            \n                    except Exception as e:\n                        print(f"⚠️ Error waiting for repository creation: {e}")\n                        \n                else:\n                    print("❌ Create Repo option not found")\n            else:\n                print("❌ Machine remote button not found for rediacc11")\n                \n        except Exception as e:\n            print(f"❌ Error creating repository: {e}")\n            \n        # Step 4: Find and expand the machine to see the new repository\n        print("\\n=== STEP 4: Expand Machine to See Repository ===")\n        \n        # Refresh the page to see the new repository\n        page.reload()\n        page.wait_for_load_state("networkidle")\n        time.sleep(3)\n        \n        # Navigate back to Resources if needed\n        if "resources" not in page.url:\n            resources_link = page.get_by_test_id("main-nav-resources").get_by_text("Resources")\n            resources_link.click()\n            page.wait_for_load_state("networkidle")\n            time.sleep(3)\n        \n        # Find and expand rediacc11\n        machine_row = page.locator('tr:has-text("rediacc11")')\n        if machine_row.count() > 0:\n            print("Found rediacc11 machine row")\n            \n            # Click expand arrow\n            expand_arrow = machine_row.locator('span.anticon-right').first\n            if expand_arrow.is_visible():\n                print("Expanding rediacc11...")\n                expand_arrow.click()\n                time.sleep(3)\n                \n                page.screenshot(path=str(screenshots_dir / "04_machine_expanded.png"))\n                print("Screenshot: 04_machine_expanded.png")\n                \n                # Step 5: Look for repositories and expand them\n                print("\\n=== STEP 5: Find and Expand Repository ===")\n                \n                repo_table = page.get_by_test_id("machine-repo-list-table")\n                if repo_table.is_visible():\n                    print("✅ Repository table found!")\n                    \n                    repo_rows = repo_table.locator('tbody tr')\n                    repo_count = repo_rows.count()\n                    print(f"Found {repo_count} repository rows")\n                    \n                    for i in range(repo_count):\n                        repo_row = repo_rows.nth(i)\n                        repo_text = repo_row.inner_text()\n                        print(f"  Repository {i+1}: {repo_text[:50]}...")\n                        \n                        if "No data" not in repo_text and repo_text.strip() and "test_logs" in repo_text:\n                            print(f"  Found our test repository, expanding...")\n                            \n                            # Expand repository\n                            repo_expand = repo_row.locator('button.ant-table-row-expand-icon, span[aria-label="right"]').first\n                            if repo_expand.is_visible():\n                                repo_expand.click()\n                                time.sleep(3)\n                                \n                                page.screenshot(path=str(screenshots_dir / "05_repository_expanded.png"))\n                                print("Screenshot: 05_repository_expanded.png")\n                                print("✅ Repository expanded!")\n                                \n                                # Step 6: Look for container actions\n                                print("\\n=== STEP 6: Find Container Actions ===")\n                                \n                                # Wait a bit for containers to be visible\n                                time.sleep(2)\n                                \n                                container_selectors = [\n                                    'button[data-testid*="container-actions"]',\n                                    'button[data-testid*="machine-repo-list-container-actions"]',\n                                    'button:has-text("Actions")',\n                                    'button[title*="Container"]',\n                                    'button[title*="Actions"]',\n                                    '.ant-btn:has-text("⋮")',\n                                    '.ant-btn:has([class*="more"])'\n                                ]\n                                \n                                container_found = False\n                                for selector in container_selectors:\n                                    try:\n                                        elements = page.locator(selector)\n                                        count = elements.count()\n                                        if count > 0:\n                                            print(f"  Found {count} potential container actions: {selector}")\n                                            \n                                            for j in range(count):\n                                                element = elements.nth(j)\n                                                if element.is_visible():\n                                                    print(f"  Clicking container actions button #{j+1}")\n                                                    element.click()\n                                                    time.sleep(1)\n                                                    \n                                                    page.screenshot(path=str(screenshots_dir / "06_actions_menu.png"))\n                                                    print("Screenshot: 06_actions_menu.png")\n                                                    \n                                                    container_found = True\n                                                    \n                                                    # Step 7: Click container_logs\n                                                    print("\\n=== STEP 7: Click container_logs ===")\n                                                    \n                                                    logs_option = page.get_by_text("container_logs")\n                                                    if logs_option.is_visible():\n                                                        print("✅ Found container_logs option!")\n                                                        logs_option.click()\n                                                        print("✅ Clicked container_logs!")\n                                                        \n                                                        # Wait for logs to appear\n                                                        time.sleep(5)\n                                                        \n                                                        page.screenshot(path=str(screenshots_dir / "07_logs_triggered.png"))\n                                                        print("Screenshot: 07_logs_triggered.png")\n                                                        \n                                                        # Step 8: Observe and document what happens\n                                                        print("\\n=== STEP 8: Observe Container Logs Display ===")\n                                                        \n                                                        observations = []\n                                                        ui_elements = []\n                                                        success_messages = []\n                                                        \n                                                        # Check for modal dialog\n                                                        modal = page.locator('.ant-modal')\n                                                        if modal.is_visible():\n                                                            observations.append("✅ Logs displayed in modal dialog")\n                                                            ui_elements.append("Modal Dialog")\n                                                            \n                                                            title_elem = modal.locator('.ant-modal-title')\n                                                            if title_elem.count() > 0:\n                                                                title = title_elem.inner_text()\n                                                                print(f"  Modal title: {title}")\n                                                                ui_elements.append(f"Modal Title: {title}")\n                                                            \n                                                            body_elem = modal.locator('.ant-modal-body')\n                                                            if body_elem.count() > 0:\n                                                                body = body_elem.inner_text()\n                                                                print(f"  Modal content preview: {body[:300]}...")\n                                                                ui_elements.append(f"Modal Content: {body[:100]}...")\n                                                        \n                                                        # Check for drawer panel\n                                                        drawer = page.locator('.ant-drawer')\n                                                        if drawer.is_visible():\n                                                            observations.append("✅ Logs displayed in drawer panel")\n                                                            ui_elements.append("Drawer Panel")\n                                                            content = drawer.inner_text()\n                                                            print(f"  Drawer content preview: {content[:300]}...")\n                                                            ui_elements.append(f"Drawer Content: {content[:100]}...")\n                                                        \n                                                        # Check for pre-formatted text (typical for logs)\n                                                        pre_elements = page.locator('pre')\n                                                        visible_pre = 0\n                                                        for k in range(pre_elements.count()):\n                                                            if pre_elements.nth(k).is_visible():\n                                                                visible_pre += 1\n                                                                content = pre_elements.nth(k).inner_text()\n                                                                print(f"  Log content in <pre> #{k+1}: {content[:200]}...")\n                                                                observations.append(f"✅ Found log content in <pre> element #{k+1}")\n                                                                ui_elements.append(f"<pre> Element: {content[:50]}...")\n                                                        \n                                                        if visible_pre > 0:\n                                                            print(f"  Found {visible_pre} visible <pre> elements with log content")\n                                                        \n                                                        # Check for code blocks\n                                                        code_elements = page.locator('code')\n                                                        for k in range(code_elements.count()):\n                                                            if code_elements.nth(k).is_visible():\n                                                                content = code_elements.nth(k).inner_text()\n                                                                if content.strip() and len(content) > 20:\n                                                                    print(f"  Log content in <code>: {content[:200]}...")\n                                                                    observations.append("✅ Found log content in <code> element")\n                                                                    ui_elements.append(f"<code> Element: {content[:50]}...")\n                                                        \n                                                        # Check for text areas\n                                                        textarea_elements = page.locator('textarea')\n                                                        for k in range(textarea_elements.count()):\n                                                            if textarea_elements.nth(k).is_visible():\n                                                                content = textarea_elements.nth(k).input_value()\n                                                                if content.strip():\n                                                                    print(f"  Log content in textarea: {content[:200]}...")\n                                                                    observations.append("✅ Found log content in textarea")\n                                                                    ui_elements.append(f"Textarea: {content[:50]}...")\n                                                        \n                                                        # Check for success/completion messages\n                                                        success_selectors = [\n                                                            '.ant-message-success',\n                                                            '.ant-notification-notice-success',\n                                                            '*:has-text("Success")',\n                                                            '*:has-text("success")',\n                                                            '*:has-text("completed")',\n                                                            '*:has-text("Completed")',\n                                                            '*:has-text("finished")',\n                                                            '*:has-text("Retrieved")',\n                                                            '*:has-text("Logs")',\n                                                            '*:has-text("Container logs")'\n                                                        ]\n                                                        \n                                                        for selector in success_selectors:\n                                                            elements = page.locator(selector)\n                                                            for k in range(elements.count()):\n                                                                element = elements.nth(k)\n                                                                if element.is_visible():\n                                                                    text = element.inner_text()\n                                                                    if text.strip() and len(text) > 5:\n                                                                        print(f"  ✅ Success/Info message: {text}")\n                                                                        success_messages.append(text)\n                                                                        observations.append(f"✅ Success message: {text}")\n                                                        \n                                                        # Check for error messages\n                                                        error_selectors = [\n                                                            '.ant-message-error',\n                                                            '.ant-notification-notice-error',\n                                                            '*:has-text("Error")',\n                                                            '*:has-text("error")',\n                                                            '*:has-text("failed")',\n                                                            '*:has-text("Failed")'\n                                                        ]\n                                                        \n                                                        for selector in error_selectors:\n                                                            elements = page.locator(selector)\n                                                            for k in range(elements.count()):\n                                                                element = elements.nth(k)\n                                                                if element.is_visible():\n                                                                    text = element.inner_text()\n                                                                    if text.strip() and len(text) > 5:\n                                                                        print(f"  ❌ Error message: {text}")\n                                                                        observations.append(f"❌ Error: {text}")\n                                                        \n                                                        # Wait for any additional async loading\n                                                        time.sleep(3)\n                                                        \n                                                        # Final comprehensive screenshot\n                                                        page.screenshot(path=str(screenshots_dir / "08_final_logs_state.png"))\n                                                        print("Screenshot: 08_final_logs_state.png")\n                                                        \n                                                        # Step 9: Report findings\n                                                        print("\\n" + "="*60)\n                                                        print("🎯 CONTAINER LOGS TEST RESULTS")\n                                                        print("="*60)\n                                                        \n                                                        print(f"\\n📋 Summary:")\n                                                        print(f"   - Successfully logged in: ✅")\n                                                        print(f"   - Successfully created repository: ✅")\n                                                        print(f"   - Successfully expanded machine: ✅")\n                                                        print(f"   - Successfully found repositories: ✅")\n                                                        print(f"   - Successfully found container actions: ✅")\n                                                        print(f"   - Successfully clicked container_logs: ✅")\n                                                        \n                                                        print(f"\\n🔍 Observations ({len(observations)} total):")\n                                                        for obs in observations:\n                                                            print(f"   {obs}")\n                                                        \n                                                        print(f"\\n🖥️  UI Elements Visible ({len(ui_elements)} total):")\n                                                        for element in ui_elements:\n                                                            print(f"   - {element}")\n                                                        \n                                                        print(f"\\n✅ Success Messages ({len(success_messages)} total):")\n                                                        for msg in success_messages:\n                                                            print(f"   - {msg}")\n                                                        \n                                                        if observations:\n                                                            print(f"\\n🎉 RESULT: Container logs functionality is WORKING!")\n                                                            print(f"   The system successfully:")\n                                                            print(f"   - Triggered container logs retrieval")\n                                                            print(f"   - Displayed logs in the UI")\n                                                            print(f"   - Provided user feedback")\n                                                        else:\n                                                            print(f"\\n⚠️  RESULT: Container logs was triggered but no clear output detected")\n                                                            print(f"   This might indicate:")\n                                                            print(f"   - Logs are loading asynchronously")\n                                                            print(f"   - No logs available for this container")\n                                                            print(f"   - Different display pattern than expected")\n                                                        \n                                                        print(f"\\n📁 Screenshots saved in: {screenshots_dir}")\n                                                        print("="*60)\n                                                        \n                                                    else:\n                                                        print("❌ container_logs option not found in menu")\n                                                        \n                                                        # Show available options\n                                                        menu_items = page.locator('.ant-dropdown-menu-item, .ant-menu-item')\n                                                        if menu_items.count() > 0:\n                                                            print("\\n  Available menu options:")\n                                                            for k in range(menu_items.count()):\n                                                                item = menu_items.nth(k)\n                                                                if item.is_visible():\n                                                                    text = item.inner_text().strip()\n                                                                    if text:\n                                                                        print(f"    - {text}")\n                                                        else:\n                                                            print("  No menu items found")\n                                                    \n                                                    break  # Exit after first successful click\n                                    except Exception as e:\n                                        print(f"  Error with selector {selector}: {e}")\n                                \n                                if not container_found:\n                                    print("❌ No container actions found")\n                                    print("   This could mean:")\n                                    print("   - Repository is still starting up")\n                                    print("   - No containers are running yet")\n                                    print("   - Template hasn't deployed containers yet")\n                                    \n                                    page.screenshot(path=str(screenshots_dir / "06_no_container_actions.png"))\n                                    print("Screenshot: 06_no_container_actions.png")\n                                \n                                break  # Only test first matching repository\n                            else:\n                                print(f"  No expand button found for repository {i+1}")\n                else:\n                    print("❌ Repository table not visible after machine expansion")\n                    page.screenshot(path=str(screenshots_dir / "05_no_repo_table.png"))\n                    print("Screenshot: 05_no_repo_table.png")\n            else:\n                print("❌ Expand arrow not found for rediacc11")\n        else:\n            print("❌ rediacc11 machine not found")\n        \n        print("\\n=== Demo Completed ===")\n        print("All screenshots saved for review")\n        \n        # Keep browser open for manual inspection\n        print("\\nKeeping browser open for 20 seconds for manual review...")\n        time.sleep(20)\n        \n    except Exception as e:\n        print(f"\\n❌ Error during demo: {str(e)}")\n        if 'page' in locals():\n            error_screenshot = screenshots_dir / "error_screenshot.png"\n            page.screenshot(path=str(error_screenshot))\n            print(f"Error screenshot: {error_screenshot}")\n        raise\n    \n    finally:\n        if context:\n            context.close()\n        if browser:\n            browser.close()\n        print("\\nBrowser closed.")\n\n\ndef main():\n    """Entry point"""\n    try:\n        with sync_playwright() as playwright:\n            run(playwright)\n    except KeyboardInterrupt:\n        print("\\nDemo interrupted by user")\n        sys.exit(1)\n    except Exception as e:\n        print(f"\\nDemo failed: {str(e)}")\n        sys.exit(1)\n\n\nif __name__ == "__main__":\n    main()