{
  "baseUrl": "http://localhost:7322",
  "logging": {
    "enabled": true,
    "level": "INFO",
    "handlers": ["console", "file"],
    "file_settings": {
      "directory": "./artifacts/logs",
      "max_size_mb": 50,
      "rotation_count": 5,
      "format": "both"
    },
    "console_settings": {
      "format": "text",
      "colorize": true
    },
    "categories": {
      "playwright_action": "DEBUG",
      "api_call": "INFO",
      "browser_console": "WARNING",
      "test_lifecycle": "INFO",
      "test_step": "INFO"
    },
    "filters": {
      "exclude_urls": ["/health", "/metrics"],
      "sanitize_fields": ["password", "token", "credential", "secret"]
    }
  },
  "login": {
    "credentials": {
      "email": "admin@rediacc.io",
      "password": "admin"
    },
    "timeouts": {
      "navigation": 10000,
      "element": 5000,
      "network": 5000
    }
  },
  "browser": {
    "headless": false,
    "slowMo": 0,
    "viewport": {
      "width": 1280,
      "height": 720
    }
  },
  "screenshots": {
    "enabled": true,
    "path": "./artifacts/screenshots"
  },
  "validation": {
    "dashboardUrl": "**/console/dashboard",
    "expectedElements": [
      {
        "selector": "h2:has-text('Dashboard')",
        "description": "Dashboard heading"
      },
      {
        "selector": "text=Account Health",
        "description": "Account Health section"
      }
    ],
    "userEmailSelector": "text=${email}"
  },
  "createRepo": {
    "machineName": "rediacc11",
    "repositoryNamePrefix": "repo",
    "repositorySize": "1",
    "template": "nginx",
    "generatePassword": true,
    "keepOpenAfterCreation": true,
    "queueTimeout": 120000,
    "timeouts": {
      "navigation": 10000,
      "element": 5000,
      "modalOpen": 3000,
      "creation": 15000
    },
    "successIndicators": [
      "Task Completed Successfully",
      "Repository created successfully",
      "Repository \".*\" created successfully"
    ]
  },
  "repoActions": {
    "machineName": "rediacc11",
    "defaultRepository": "repo03",
    "actions": {
      "up": "up",
      "down": "down",
      "push": "push"
    },
    "timeouts": {
      "navigation": 10000,
      "element": 5000,
      "queueCompletion": 60000
    },
    "successIndicators": [
      "Task Completed Successfully",
      "Repository started successfully",
      "Repository services started"
    ],
    "failureIndicators": [
      "Task Failed",
      "Bridge reported failure",
      "Failed to start repository"
    ]
  },
  "registration": {
    "company": "rediacc",
    "email": "test_${timestamp}@rediacc.com",
    "password": "87654321i_",
    "activationCode": "111111"
  },
  "ui": {
    "languageDropdownSelector": ".ant-select-selector",
    "languageDropdownOptionsSelector": ".ant-select-dropdown",
    "languageSelector": "ðŸ‡«ðŸ‡· FranÃ§ais",
    "loginLinkText": "Login",
    "registerLinkTestId": "login-register-link",
    "companyInputTestId": "registration-company-input",
    "emailInputTestId": "registration-email-input",
    "passwordInputTestId": "registration-password-input",
    "passwordConfirmInputTestId": "registration-password-confirm-input",
    "submitButtonTestId": "registration-submit-button",
    "activationCodeInputTestId": "registration-activation-code-input",
    "verifyButtonTestId": "registration-verify-button"
  },
  "timeouts": {
    "pageLoad": 30000,
    "networkIdle": "networkidle",
    "elementVisible": 5000,
    "apiResponse": 10000
  },
  "registrationValidation": {
    "successMessages": {
      "registrationSuccess": "Registration successful! Please check your email for the activation code.",
      "activationSuccess": "Account activated successfully!",
      "registrationComplete": "Registration Complete!"
    },
    "errorMessages": {
      "userExists": "User with email .* already exists.",
      "invalidCode": "Invalid activation code",
      "networkError": "Network error"
    }
  },
  "repoEdit": {
    "repository": {
      "targetRepoName": "repo_edited_${timestamp}",
      "accessPassword": "Test@1234$Pass#2024"
    },
    "ui": {
      "loginEmailTestId": "login-email-input",
      "loginPasswordTestId": "login-password-input",
      "loginSubmitButtonTestId": "login-submit-button",
      "resourcesMenuTestId": "main-nav-resources",
      "resourcesMenuText": "Resources",
      "repositoriesTabTestId": "resources-tab-repositories",
      "repositoryEditButtonPrefix": "resources-repository-edit-",
      "repositoryNameInputTestId": "resource-modal-field-repositoryName-input",
      "modalOkButtonTestId": "resource-modal-ok-button",
      "modalCancelButtonTestId": "resource-modal-cancel-button",
      "accessPasswordInputSelector": "[data-testid*='credential'] input[type='password'], input[placeholder*='Access Password']"
    },
    "validation": {
      "successMessages": {
        "repositoryUpdated": "Repository updated successfully",
        "savedSuccessfully": "Saved successfully",
        "updateComplete": "Update complete"
      },
      "errorMessages": {
        "validationError": "Validation Errors:",
        "passwordRequired": "Access Password is required",
        "networkError": "Network error",
        "saveError": "Failed to save"
      },
      "toastSelectors": [
        ".ant-message",
        ".ant-notification",
        "[role='alert']",
        ".toast-success",
        ".notification-success"
      ]
    }
  },
  "repoDown": {
    "ui": {
      "loginEmailTestId": "login-email-input",
      "loginPasswordTestId": "login-password-input",
      "loginSubmitButtonTestId": "login-submit-button",
      "resourcesMenuTestId": "main-nav-resources",
      "resourcesMenuText": "Resources",
      "machineExpandTestId": "machine-expand-",
      "remoteButtonTestId": "machine-repo-list-repo-actions-",
      "localDropdownTestId": "local-actions-dropdown-",
      "queueTraceCloseTestId": "queue-trace-close-button"
    },
    "test": {
      "targetMachine": "rediacc11",
      "targetRepositoryPattern": "repo_",
      "targetRepository": "repo006",
      "targetAction": "down",
      "alternativeActions": ["Down", "Stop", "Shutdown"]
    },
    "timeouts": {
      "pageLoad": 10000,
      "networkIdle": 5000,
      "elementWait": 5000,
      "actionDelay": 1000
    },
    "validation": {
      "checkForSuccessToast": true,
      "verifyQueueDialog": true,
      "screenshotOnError": true
    },
    "queueTimeout": 120000
  },
  "repoPush": {
    "ui": {
      "loginEmailTestId": "login-email-input",
      "loginPasswordTestId": "login-password-input",
      "loginSubmitButtonTestId": "login-submit-button",
      "resourcesMenuTestId": "main-nav-resources",
      "machineExpandTestId": "machine-expand-",
      "remoteButtonTestId": "machine-repo-list-repo-actions-",
      "functionModalSubmitTestId": "function-modal-submit",
      "queueTraceCloseTestId": "queue-trace-close-button"
    },
    "test": {
      "sourceMachine": "rediacc11",
      "targetMachine": "rediacc12",
      "repositoryName": "repo006",
      "pushAction": "push",
      "destinationType": "machine",
      "pushOptions": {
        "overrideExisting": false,
        "requireOnlineState": true
      }
    },
    "timeouts": {
      "pageLoad": 10000,
      "networkIdle": 5000,
      "elementWait": 5000,
      "actionDelay": 1000,
      "pushOperation": 60000
    },
    "validation": {
      "checkForSuccessToast": true,
      "expectedToastMessages": [
        "Repository creation queued successfully",
        "Repository \"*\" created successfully"
      ],
      "verifyQueueTrace": true,
      "screenshotOnError": true
    }
  },
  "storageImport": {
    "confFile": "conf.conf",
    "targetMachine": "rediacc11",
    "targetRepository": "repo03",
    "targetStorage": "microsoft",
    "pushDestinationType": "storage",
    "ui": {
      "loginLink": "header-login-link",
      "navResources": "nav-resources",
      "storageTab": "resources-tab-storage",
      "importButton": "resources-import-button",
      "uploadDragger": "rclone-wizard-upload-dragger",
      "importConfirm": "rclone-wizard-import-button",
      "closeImport": "rclone-wizard-close-button",
      "navMachines": "nav-machines",
      "machineRow": "machine-row-",
      "repoButton": "machine-repositories-button-",
      "pushAction": "repo-action-push",
      "storageSelector": "push-storage-selector",
      "storageSelection": "push-storage-selection",
      "addToQueue": "push-add-to-queue-button",
      "queueTraceClose": "queue-trace-modal-close-button"
    },
    "validation": {
      "successMessages": {
        "importSuccess": "Storage imported successfully",
        "queueSuccess": "Repository creation queued successfully",
        "pushConfigured": "Push configured successfully"
      },
      "conflictMessages": {
        "storageExists": "already exists",
        "importConflict": "conflict"
      }
    },
    "timeouts": {
      "modalOpen": 3000,
      "fileUpload": 5000,
      "importProcess": 10000,
      "queueCreation": 5000,
      "elementWait": 5000
    }
  },
  "repoUp": {
    "test": {
      "targetMachine": "rediacc11",
      "targetRepository": "repo03",
      "action": "up"
    },
    "ui": {
      "loginEmailTestId": "login-email-input",
      "loginPasswordTestId": "login-password-input",
      "loginSubmitButtonTestId": "login-submit-button",
      "resourcesMenuTestId": "main-nav-resources",
      "resourcesMenuText": "Resources",
      "machineExpandPrefix": "machine-expand-",
      "machineRemotePrefix": "machine-remote-",
      "repoActionsPrefix": "machine-repo-list-repo-actions-",
      "queueTraceCloseTestId": "queue-trace-close-button",
      "upActionText": "up",
      "closeButtonText": "Close"
    },
    "validation": {
      "successMessages": {
        "queueCreated": "Repository creation queued successfully",
        "taskCompleted": "Task Completed Successfully",
        "repositoryStarted": "Repository started successfully"
      },
      "failureMessages": {
        "setupFailed": "Repository setup failed",
        "exitCode": "exit code"
      },
      "taskStates": {
        "pending": "PENDING",
        "assigned": "Assigned",
        "processing": "Processing", 
        "completed": "Completed",
        "failed": "Failed"
      }
    },
    "timeouts": {
      "pageLoad": 10000,
      "networkIdle": 5000,
      "elementWait": 5000,
      "queueCompletion": 30000
    }
  },
  "createMachine": {
    "machineName": "rediacc21",
    "ip": "192.168.111.21",
    "user": "anl",
    "testConnection": true,
    "runSetupAfterCreation": true,
    "generateUniqueName": true,
    "timeouts": {
      "navigation": 10000,
      "element": 5000,
      "connectionTest": 15000,
      "creation": 20000
    },
    "successIndicators": [
      "SSH connection successful",
      "Machine created successfully",
      "Machine '.*' created successfully",
      "Setup has been queued",
      "Task Completed Successfully"
    ]
  },
  "repoDelete": {
    "test": {
      "targetRepository": null,
      "targetIndex": 0,
      "deleteByName": false
    },
    "ui": {
      "loginEmailTestId": "login-email-input",
      "loginPasswordTestId": "login-password-input",
      "loginSubmitButtonTestId": "login-submit-button",
      "resourcesMenuTestId": "main-nav-resources",
      "repositoriesTabTestId": "resources-tab-repositories",
      "deleteButtonPrefix": "resources-repository-delete-",
      "modalSelector": "div[role='dialog']",
      "modalContentSelector": "div.ant-modal-confirm-content",
      "deleteConfirmButtonSelector": "button.ant-btn-dangerous"
    },
    "validation": {
      "successMessages": [
        "Repository deleted successfully",
        "Repository '{name}' deleted successfully",
        "Repository \"{name}\" deleted successfully"
      ],
      "notificationSelectors": [
        ".ant-message",
        ".ant-notification",
        "[role='alert']"
      ],
      "confirmationTexts": [
        "Are you sure you want to delete repository",
        "This action cannot be undone"
      ]
    },
    "timeouts": {
      "pageLoad": 10000,
      "elementWait": 5000,
      "modalWait": 5000,
      "notificationWait": 5000,
      "networkIdle": 5000
    }
  },
  "systemCreateUser": {
    "ui": {
      "systemNavTestId": "main-nav-system",
      "usersTabSelector": ".ant-tabs-tab:has-text(\"Users\")",
      "createUserButtonTestId": "system-create-user-button",
      "modalSelector": ".ant-modal",
      "emailInputTestId": "resource-form-field-newUserEmail",
      "passwordInputTestId": "resource-form-field-newUserPassword",
      "submitButtonTestId": "resource-form-submit-button",
      "cancelButtonTestId": "resource-form-cancel-button",
      "closeButtonSelector": ".ant-modal-close"
    },
    "testData": {
      "emailPrefix": "testuser_",
      "emailDomain": "@example.com",
      "defaultPassword": "TestPassword123!",
      "generateUniqueEmail": true
    },
    "validation": {
      "successIndicators": {
        "modalCloses": true,
        "userAppearsInTable": true,
        "notificationSelectors": [
          ".ant-message-success",
          ".ant-notification-notice-success",
          ".ant-message",
          ".ant-notification"
        ]
      },
      "successMessages": [
        "User created successfully",
        "User added successfully", 
        "Created successfully",
        "Success"
      ],
      "errorSelectors": [
        ".ant-message-error",
        ".ant-notification-notice-error",
        ".error-message"
      ]
    },
    "timeouts": {
      "pageLoad": 10000,
      "elementWait": 5000,
      "modalOpen": 3000,
      "modalClose": 10000,
      "tableRefresh": 5000,
      "notificationWait": 3000
    }
  },
  "systemCreateTeam": {
    "ui": {
      "systemNavTestId": "main-nav-system",
      "teamsTabTestId": "system-tab-teams",
      "createTeamButtonTestId": "system-create-team-button",
      "teamNameInputTestId": "resource-modal-field-teamName-input",
      "sshKeyGenerateButtonTestId": "vault-editor-generate-SSH_PRIVATE_KEY",
      "generateButtonTestId": "vault-editor-generate-button",
      "applyGeneratedButtonTestId": "vault-editor-apply-generated",
      "submitButtonTestId": "resource-modal-ok-button",
      "cancelButtonTestId": "resource-modal-cancel-button",
      "teamsTableSelector": "table.ant-table",
      "modalSelector": ".ant-modal",
      "keyTypeSelector": "input[value='RSA']",
      "keySizeSelector": "input[value='4096']"
    },
    "testData": {
      "teamNamePrefix": "TestTeam",
      "generateUnique": true,
      "sshKeyType": "RSA",
      "sshKeySize": "4096"
    },
    "validation": {
      "successIndicators": [
        "Team created successfully",
        "Team '.*' created successfully",
        "Successfully created team"
      ],
      "errorMessages": [
        "Team already exists",
        "Team name is required",
        "SSH key generation failed"
      ],
      "notificationSelectors": [
        ".ant-message",
        ".ant-notification",
        "[role='alert']"
      ]
    },
    "timeouts": {
      "navigation": 10000,
      "element": 5000,
      "modalOpen": 3000,
      "sshKeyGeneration": 5000,
      "creation": 10000,
      "validation": 5000
    }
  },
  "systemDeactivateUser": {
    "ui": {
      "systemNavTestId": "main-nav-system",
      "usersTabSelector": ".ant-tabs-tab:has-text('Users')",
      "deactivateButtonPrefix": "system-user-deactivate-button-",
      "activateButtonPrefix": "system-user-activate-button-",
      "confirmDialogSelector": ".ant-popconfirm",
      "confirmYesButton": ".ant-popconfirm button.ant-btn-dangerous:has-text('Yes')",
      "confirmNoButton": ".ant-popconfirm button:has-text('No')",
      "usersTableSelector": "table.ant-table",
      "statusActiveTag": ".ant-tag-green",
      "statusInactiveTag": ".ant-tag-default",
      "userRowSelector": "tr.ant-table-row"
    },
    "testData": {
      "targetUserEmail": null,
      "preferNonAdminUsers": true,
      "skipProtectedUsers": ["admin@rediacc.io", "bridge"],
      "testMode": "first_available"
    },
    "validation": {
      "successIndicators": [
        "User deactivated successfully",
        "User '.*' deactivated successfully",
        "Successfully deactivated user",
        "User status updated"
      ],
      "errorMessages": [
        "Cannot deactivate admin user",
        "User not found",
        "Deactivation failed",
        "Protected user"
      ],
      "notificationSelectors": [
        ".ant-message",
        ".ant-notification",
        "[role='alert']"
      ],
      "statusChangeVerification": true
    },
    "timeouts": {
      "navigation": 10000,
      "element": 5000,
      "confirmDialog": 3000,
      "deactivation": 5000,
      "statusUpdate": 3000,
      "validation": 5000
    }
  },
  "systemPermissions": {
    "ui": {
      "systemNavTestId": "main-nav-system",
      "expertModeSelector": ".ant-segmented-item:has-text('Expert')",
      "simpleModeSelector": ".ant-segmented-item:has-text('Simple')",
      "permissionsTabTestId": "system-tab-permissions",
      "createButtonTestId": "system-create-permission-group-button",
      "groupNameInputTestId": "system-permission-group-name-input",
      "submitButtonTestId": "modal-create-permission-group-ok",
      "cancelButtonTestId": "modal-create-permission-group-cancel",
      "permissionsTableSelector": "table.ant-table",
      "modalSelector": ".ant-modal",
      "modeToggleSelector": ".ant-segmented",
      "permissionCheckboxPrefix": "permission-checkbox-",
      "userDropdownSelector": ".ant-select-selector"
    },
    "testData": {
      "groupNamePrefix": "TestPermGroup",
      "generateUnique": true,
      "requireExpertMode": true,
      "defaultPermissions": []
    },
    "validation": {
      "successIndicators": [
        "Permission group created successfully",
        "Permission group '.*' created successfully",
        "Successfully created permission group"
      ],
      "errorMessages": [
        "Permission group already exists",
        "Group name is required",
        "Invalid permissions"
      ],
      "notificationSelectors": [
        ".ant-message",
        ".ant-notification",
        "[role='alert']"
      ],
      "checkTableEntry": true,
      "checkDropdownAvailability": true
    },
    "timeouts": {
      "navigation": 10000,
      "element": 5000,
      "modalOpen": 3000,
      "creation": 5000,
      "validation": 5000,
      "modeSwitch": 3000
    }
  },
  "systemRegionDelete": {
    "targetRegion": "region004",
    "createTestRegionFirst": false,
    "ui": {
      "systemNavTestId": "main-nav-system",
      "expertModeSelector": "label:has-text('Expert')",
      "regionsTabSelector": "text=Regions",
      "deleteButtonPrefix": "system-region-delete-button-",
      "confirmYesButton": "button:has-text('Yes')",
      "confirmOkButton": "button:has-text('OK')",
      "modalSelector": ".ant-modal, [role='dialog']",
      "tableSelector": "table.ant-table"
    },
    "validation": {
      "successIndicators": [
        "Region deleted successfully",
        "Region '.*' deleted successfully",
        "Successfully deleted region"
      ],
      "errorMessages": [
        "Cannot delete Default Region",
        "Region not found",
        "Deletion failed"
      ],
      "notificationSelectors": [
        ".ant-message",
        ".ant-notification",
        "[role='alert']"
      ]
    },
    "timeouts": {
      "navigation": 10000,
      "element": 5000,
      "confirmDialog": 3000,
      "deletion": 5000,
      "validation": 5000
    }
  },
  "systemRegionEdit": {
    "sourceRegion": "Default Region",
    "targetRegion": "Modified Region",
    "ui": {
      "systemNavTestId": "main-nav-system",
      "expertModeSelector": "label:has-text('Expert')",
      "simpleModeSelector": "label:has-text('Simple')",
      "regionsTabSelector": "text=Regions",
      "editButtonPrefix": "system-region-edit-button-",
      "regionNameInputTestId": "resource-modal-field-regionName-input",
      "submitButtonTestId": "resource-modal-ok-button",
      "cancelButtonTestId": "resource-modal-cancel-button",
      "modalSelector": ".ant-modal",
      "tableSelector": "table.ant-table"
    },
    "validation": {
      "successIndicators": [
        "Region updated successfully",
        "Region '.*' updated successfully",
        "Successfully updated region"
      ],
      "errorMessages": [
        "Region name already exists",
        "Region name is required",
        "Update failed"
      ],
      "notificationSelectors": [
        ".ant-message",
        ".ant-notification",
        "[role='alert']"
      ]
    },
    "timeouts": {
      "navigation": 10000,
      "element": 5000,
      "modalOpen": 3000,
      "update": 5000,
      "validation": 5000
    }
  },
  "systemVaultConfiguration": {
    "ui": {
      "systemNavTestId": "main-nav-system",
      "companyVaultButtonTestId": "system-company-vault-button",
      "userVaultButtonPrefix": "system-user-vault-button",
      "teamsTabTestId": "system-tab-teams",
      "teamVaultButtonPrefix": "system-team-vault-button",
      "sshGenerateButtonTestId": "vault-editor-generate-SSH_PRIVATE_KEY",
      "generateButtonTestId": "vault-editor-generate-button",
      "applyGeneratedButtonTestId": "vault-editor-apply-generated",
      "saveButtonTestId": "vault-modal-save-button",
      "cancelButtonTestId": "vault-modal-cancel-button",
      "modalSelector": ".ant-modal",
      "vaultFieldPrefix": "vault-editor-field-",
      "keyTypeSelector": "input[value='RSA']",
      "keySizeSelector": "input[value='4096']",
      "universalUserIdField": "vault-editor-field-UNIVERSAL_USER_ID",
      "universalUserNameField": "vault-editor-field-UNIVERSAL_USER_NAME"
    },
    "testData": {
      "vaultType": "company",
      "targetUser": null,
      "targetTeam": null,
      "sshKeyType": "RSA",
      "sshKeySize": "4096",
      "universalUserId": "universal_user_001",
      "universalUserName": "Universal User",
      "dockerConfig": null,
      "plugins": null
    },
    "validation": {
      "successIndicators": [
        "Vault configuration saved successfully",
        "Vault updated successfully",
        "Configuration saved"
      ],
      "errorMessages": [
        "Required fields missing",
        "Invalid configuration",
        "Save failed"
      ],
      "notificationSelectors": [
        ".ant-message",
        ".ant-notification",
        "[role='alert']"
      ],
      "checkRequiredFields": true
    },
    "timeouts": {
      "navigation": 10000,
      "element": 5000,
      "modalOpen": 3000,
      "sshKeyGeneration": 5000,
      "save": 5000,
      "validation": 5000
    }
  },
  "systemCreateBridge": {
    "ui": {
      "systemNavTestId": "main-nav-system",
      "expertModeSelector": "label:has-text('Expert')",
      "simpleModeSelector": "label:has-text('Simple')",
      "bridgesTabSelector": ".ant-tabs-tab:has-text('Bridges')",
      "createBridgeButtonTestId": "system-create-bridge-button",
      "teamSelectTestId": "resource-modal-field-teamName-select",
      "bridgeNameInputTestId": "resource-modal-field-bridgeName-input",
      "submitButtonTestId": "resource-modal-ok-button",
      "cancelButtonTestId": "resource-modal-cancel-button",
      "modalSelector": ".ant-modal"
    },
    "testData": {
      "teamName": "Private Team",
      "bridgeNamePrefix": "testbridge",
      "generateUniqueName": true,
      "requireExpertMode": true
    },
    "validation": {
      "successIndicators": [
        "Bridge created successfully",
        "Bridge '.*' created successfully",
        "Successfully created bridge"
      ],
      "errorMessages": [
        "Bridge already exists",
        "Bridge name is required",
        "Team selection is required"
      ],
      "notificationSelectors": [
        ".ant-message",
        ".ant-notification",
        "[role='alert']"
      ]
    },
    "timeouts": {
      "navigation": 10000,
      "element": 5000,
      "modalOpen": 3000,
      "creation": 5000,
      "validation": 5000,
      "modeSwitch": 3000
    }
  },
  "systemTeamsDelete": {
    "ui": {
      "systemNavTestId": "main-nav-system",
      "teamsTabTestId": "system-tab-teams",
      "deleteButtonPrefix": "system-team-delete-button-",
      "confirmDialogSelector": ".ant-popconfirm",
      "confirmYesButton": ".ant-popconfirm button.ant-btn-dangerous:has-text('Yes')",
      "confirmNoButton": ".ant-popconfirm button:has-text('No')",
      "teamsTableSelector": "table.ant-table",
      "teamRowSelector": "tr.ant-table-row",
      "modalSelector": ".ant-modal",
      "createTeamButtonTestId": "system-create-team-button",
      "teamNameInputTestId": "resource-modal-field-teamName-input"
    },
    "testData": {
      "targetTeamName": null,
      "skipSystemTeams": ["Default", "Private Team"],
      "deleteMode": "first_available",
      "createTestTeamIfNeeded": true,
      "testTeamPrefix": "TestDeleteTeam"
    },
    "validation": {
      "successIndicators": [
        "Team deleted successfully",
        "Team '.*' deleted successfully",
        "Successfully deleted team"
      ],
      "errorMessages": [
        "Cannot delete the default",
        "This is a system-required entity",
        "Team not found",
        "Deletion failed"
      ],
      "notificationSelectors": [
        ".ant-message",
        ".ant-notification",
        "[role='alert']"
      ],
      "checkTableAfterDeletion": true
    },
    "timeouts": {
      "navigation": 10000,
      "element": 5000,
      "confirmDialog": 3000,
      "deletion": 5000,
      "validation": 5000
    }
  }
}