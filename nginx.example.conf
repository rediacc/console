# Nginx Configuration for Open-Source Rediacc Console
# 
# This is a simple nginx configuration for serving the Rediacc Console
# as a standalone application. It doesn't include API proxying since
# the console handles API endpoint selection internally.
#
# Usage:
# 1. Build the console: REDIACC_BUILD_TYPE=DEBUG npm run build
# 2. Copy dist files to your web server directory
# 3. Use this configuration with nginx

server {
    listen 80;
    server_name localhost;
    
    # Path to your built console files
    root /usr/share/nginx/html;
    
    # Gzip compression for better performance
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml+rss;
    
    # Main console application
    location / {
        try_files $uri $uri/ /index.html;
        
        # Security headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Cache static assets
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # Don't cache the index.html
        location = /index.html {
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }
        
        # Don't cache the config.js
        location = /config.js {
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }
    }
    
    # Health check endpoint (for container orchestration)
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # If you're deploying with your own backend, uncomment this section:
    # location /api/ {
    #     proxy_pass http://your-backend-server:7322;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    #     
    #     # CORS headers if needed
    #     add_header Access-Control-Allow-Origin * always;
    #     add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
    #     add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
    # }
    
    # Custom 404 page
    error_page 404 /404.html;
    location = /404.html {
        internal;
    }
}

# HTTPS configuration example
# server {
#     listen 443 ssl http2;
#     server_name your-domain.com;
#     
#     ssl_certificate /path/to/cert.pem;
#     ssl_certificate_key /path/to/key.pem;
#     
#     # Strong SSL configuration
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers HIGH:!aNULL:!MD5;
#     ssl_prefer_server_ciphers on;
#     
#     # Add HSTS header
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#     
#     # ... rest of configuration same as above ...
# }

# Redirect HTTP to HTTPS
# server {
#     listen 80;
#     server_name your-domain.com;
#     return 301 https://$server_name$request_uri;
# }