name: Publish Console Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., v1.0.0 or 1.0.0)'
        required: false
        type: string

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages-release"
  cancel-in-progress: false

jobs:
  publish:
    name: Build and Publish Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper tag detection

      - name: Detect or Create Tag
        id: detect-tag
        run: |
          # Determine the version/tag to use
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Triggered by tag push - use that tag
            TAG_NAME="${{ github.ref_name }}"
            echo "Using existing tag from push: $TAG_NAME"
            echo "tag_created=false" >> $GITHUB_OUTPUT
          elif [ -n "${{ inputs.version }}" ]; then
            # Manual trigger with version input
            VERSION="${{ inputs.version }}"
            # Normalize to v-prefixed format
            if [[ "$VERSION" != v* ]]; then
              TAG_NAME="v$VERSION"
            else
              TAG_NAME="$VERSION"
            fi

            # Check if tag already exists
            if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
              echo "Tag $TAG_NAME already exists"
              echo "tag_created=false" >> $GITHUB_OUTPUT
            else
              # Create new tag at current commit
              echo "Creating new tag: $TAG_NAME"
              git config user.name "github-actions[bot]"
              git config user.email "github-actions[bot]@users.noreply.github.com"
              git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
              git push origin "$TAG_NAME"
              echo "tag_created=true" >> $GITHUB_OUTPUT
            fi
          else
            # Try to detect from current commit
            TAG_NAME=$(git describe --exact-match --tags HEAD 2>/dev/null || echo "")
            if [ -z "$TAG_NAME" ]; then
              echo "Error: No version specified and not on a tag"
              exit 1
            fi
            echo "Detected tag from current commit: $TAG_NAME"
            echo "tag_created=false" >> $GITHUB_OUTPUT
          fi

          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Final tag: $TAG_NAME"

      - name: Get commit SHA from tag
        id: get-sha
        run: |
          COMMIT_SHA=$(git rev-parse ${{ steps.detect-tag.outputs.tag_name }}^{commit})
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "Commit SHA: $COMMIT_SHA"

      - name: Find CI workflow run for commit
        id: find-run
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMIT_SHA="${{ steps.get-sha.outputs.commit_sha }}"
          echo "Looking for CI workflow run for commit: $COMMIT_SHA"

          # Find the workflow run ID for this commit
          RUN_ID=$(gh run list \
            --workflow=ci.yml \
            --commit="$COMMIT_SHA" \
            --status=success \
            --limit=1 \
            --json databaseId \
            --jq '.[0].databaseId')

          if [ -z "$RUN_ID" ] || [ "$RUN_ID" = "null" ]; then
            echo "Error: No successful CI workflow run found for commit $COMMIT_SHA"
            echo "Please ensure CI has completed successfully for this commit"
            exit 1
          fi

          echo "Found workflow run ID: $RUN_ID"
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT

      - name: Download build artifact from CI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMIT_SHA="${{ steps.get-sha.outputs.commit_sha }}"
          RUN_ID="${{ steps.find-run.outputs.run_id }}"
          ARTIFACT_NAME="build-RELEASE-$COMMIT_SHA"

          echo "Downloading artifact: $ARTIFACT_NAME"
          echo "From workflow run: $RUN_ID"

          # Download artifact using GitHub CLI
          gh run download "$RUN_ID" \
            --name "$ARTIFACT_NAME" \
            --dir dist/

          echo "Artifact downloaded successfully"
          ls -lah dist/

      - name: Create CNAME file
        run: echo 'console.rediacc.com' > dist/CNAME

      - name: Create 404.html for SPA routing
        run: cp dist/index.html dist/404.html

      - name: Create .nojekyll file
        run: touch dist/.nojekyll

      - name: Create build info
        run: |
          cat > dist/version.json <<EOF
          {
            "version": "${{ steps.detect-tag.outputs.tag_name }}",
            "buildDate": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "gitCommit": "$(git rev-parse HEAD)",
            "gitCommitShort": "$(git rev-parse --short HEAD)"
          }
          EOF

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: console-${{ steps.detect-tag.outputs.tag_name }}
          path: dist/
          retention-days: 90

      - name: Setup gh-pages directory
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            echo "gh-pages branch exists, checking out..."
            git clone --branch gh-pages --depth 1 https://x-access-token:${GITHUB_TOKEN}@github.com/rediacc/console.git gh-pages
          else
            echo "gh-pages branch does not exist, creating new directory..."
            mkdir -p gh-pages
            (cd gh-pages && git init -b gh-pages && git remote add origin https://x-access-token:${GITHUB_TOKEN}@github.com/rediacc/console.git)
          fi

          # Verify directory exists and is accessible
          ls -la gh-pages/
          echo "gh-pages directory ready"

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Deploy versioned release
        run: |
          chmod +x .github/scripts/manage-versions.sh
          .github/scripts/manage-versions.sh deploy gh-pages dist ${{ steps.detect-tag.outputs.tag_name }}

      - name: Verify deployment structure
        run: |
          echo "=== gh-pages directory structure ==="
          ls -laR gh-pages/ | head -100
          echo ""
          echo "=== Checking for versions directory ==="
          ls -la gh-pages/versions/ || echo "versions directory not found!"
          echo ""
          echo "=== Checking for versions.json ==="
          cat gh-pages/versions.json || echo "versions.json not found!"

      - name: Push to gh-pages branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd gh-pages
          git add -A

          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Deploy version ${{ steps.detect-tag.outputs.tag_name }}"
            git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/rediacc/console.git
            git push origin gh-pages
          fi

      - name: Generate Release Notes
        id: release-notes
        run: |
          cat > RELEASE_NOTES.md <<EOF
          # Console Release ${{ steps.detect-tag.outputs.tag_name }}

          ## Build Information
          - **Version**: ${{ steps.detect-tag.outputs.tag_name }}
          - **Build Date**: $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)
          - **Commit**: \`$(git rev-parse --short HEAD)\`
          - **Latest**: https://console.rediacc.com
          - **This Version**: https://console.rediacc.com/versions/${{ steps.detect-tag.outputs.tag_name }}/

          ## Access This Version

          - **Latest (always up-to-date)**: [console.rediacc.com](https://console.rediacc.com)
          - **This specific version**: [console.rediacc.com/versions/${{ steps.detect-tag.outputs.tag_name }}/](https://console.rediacc.com/versions/${{ steps.detect-tag.outputs.tag_name }}/)
          - **All versions**: [console.rediacc.com/versions/](https://console.rediacc.com/versions/)

          ## What's Included

          - Production-optimized React build
          - All static assets (JS, CSS, images)
          - Version information at \`/version.json\`

          ## Version Management

          This release is deployed with automatic version management:
          - Old versions are automatically cleaned up to maintain total size under 128 MB
          - At least the 3 most recent versions are always retained
          - Each version is accessible via its own subdirectory

          ## Deployment

          This release has been automatically deployed to GitHub Pages with versioned URLs.

          ---
          ðŸ¤– Built and deployed via GitHub Actions
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.detect-tag.outputs.tag_name }}
          name: Console ${{ steps.detect-tag.outputs.tag_name }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deployment Summary
        run: |
          echo "## ðŸš€ Console Release Deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.detect-tag.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest URL**: https://console.rediacc.com" >> $GITHUB_STEP_SUMMARY
          echo "- **This Version**: https://console.rediacc.com/versions/${{ steps.detect-tag.outputs.tag_name }}/" >> $GITHUB_STEP_SUMMARY
          echo "- **All Versions**: https://console.rediacc.com/versions/" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Date**: $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`$(git rev-parse --short HEAD)\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify latest deployment at https://console.rediacc.com" >> $GITHUB_STEP_SUMMARY
          echo "2. Check this version at https://console.rediacc.com/versions/${{ steps.detect-tag.outputs.tag_name }}/" >> $GITHUB_STEP_SUMMARY
          echo "3. Browse all versions at https://console.rediacc.com/versions/" >> $GITHUB_STEP_SUMMARY
          echo "4. Check version.json at https://console.rediacc.com/version.json" >> $GITHUB_STEP_SUMMARY
          echo "5. Review the GitHub Release" >> $GITHUB_STEP_SUMMARY
