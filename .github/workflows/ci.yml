name: Console CI

on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - main
      - develop

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type check
        run: npx tsc --noEmit

  build:
    name: Build Application
    runs-on: ubuntu-latest

    strategy:
      matrix:
        build-type: [DEBUG, RELEASE]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application (${{ matrix.build-type }})
        env:
          REDIACC_BUILD_TYPE: ${{ matrix.build-type }}
          VITE_APP_VERSION: ${{ github.sha }}
          NODE_ENV: production
        run: npm run build

      - name: Check build output
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not created"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "Error: index.html not found in dist"
            exit 1
          fi
          echo "Build successful!"
          ls -lah dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.build-type }}-${{ github.sha }}
          path: dist/
          retention-days: 7

  test-api:
    name: API Integration Tests
    runs-on: ubuntu-latest
    if: false  # Enable when test-api.mjs is implemented

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run API tests
        run: node test-api.mjs

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Run npm audit
        run: npm audit --audit-level=moderate || true

      - name: Check for vulnerable dependencies
        run: |
          echo "Checking for known vulnerabilities..."
          npm audit --json > audit-report.json || true
          cat audit-report.json

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-${{ github.sha }}
          path: audit-report.json
          retention-days: 30

  bundle-size:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        env:
          REDIACC_BUILD_TYPE: RELEASE
          NODE_ENV: production
        run: npm run build

      - name: Analyze bundle size
        run: |
          echo "## Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Main Bundles" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          du -h dist/assets/js/*.js | sort -h >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Total Size" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          du -sh dist/ >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Check bundle size limits
        run: |
          TOTAL_SIZE=$(du -sb dist/ | cut -f1)
          MAX_SIZE=$((10 * 1024 * 1024))  # 10MB limit

          if [ $TOTAL_SIZE -gt $MAX_SIZE ]; then
            echo "::warning::Bundle size ($TOTAL_SIZE bytes) exceeds 10MB limit"
          else
            echo "Bundle size OK: $TOTAL_SIZE bytes"
          fi

  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, type-check, build, security-scan, bundle-size]
    if: always()

    steps:
      - name: Check job results
        run: |
          echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Type Check: ${{ needs.type-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Bundle Size: ${{ needs.bundle-size.result }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.type-check.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **CI Pipeline Failed**" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All CI Checks Passed**" >> $GITHUB_STEP_SUMMARY
          fi
