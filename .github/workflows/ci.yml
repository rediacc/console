name: Console CI

on:
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened, edited]
  push:
    branches:
      - main
      - develop
  merge_group:
    branches:
      - main
      - develop

jobs:
  # PR Validation Jobs (only run on pull_request)
  pr-validation:
    name: Validate PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Check PR title format
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.pull_request.title;
            const pattern = /^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\(.+\))?: .+/;

            if (!pattern.test(title)) {
              core.setFailed(
                'PR title must follow Conventional Commits format:\n' +
                'type(scope): description\n\n' +
                'Types: feat, fix, docs, style, refactor, perf, test, chore, ci, build, revert\n' +
                'Example: feat(ui): add dark mode toggle'
              );
            } else {
              core.info('✅ PR title follows Conventional Commits format');
            }

      - name: Check PR description
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.pull_request.body || '';

            if (body.length < 20) {
              core.setFailed('PR description is too short. Please provide a detailed description.');
            } else {
              core.info('✅ PR description is adequate');
            }

      - name: Check for linked issues
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.pull_request.body || '';
            const issuePattern = /(close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved|ref|refs)\s+#\d+/i;

            if (!issuePattern.test(body)) {
              core.warning('PR does not reference any issues. Consider linking related issues.');
            } else {
              core.info('✅ PR references issues');
            }

  pr-size-check:
    name: PR Size Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR size
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });

            const additions = files.reduce((sum, file) => sum + file.additions, 0);
            const deletions = files.reduce((sum, file) => sum + file.deletions, 0);
            const totalChanges = additions + deletions;
            const fileCount = files.length;

            core.info(`Files changed: ${fileCount}`);
            core.info(`Lines added: ${additions}`);
            core.info(`Lines deleted: ${deletions}`);
            core.info(`Total changes: ${totalChanges}`);

            // Warning thresholds
            if (totalChanges > 1000) {
              core.warning(
                `⚠️ Large PR detected (${totalChanges} lines changed). ` +
                'Consider breaking it into smaller PRs for easier review.'
              );
            }

            if (fileCount > 30) {
              core.warning(
                `⚠️ Many files changed (${fileCount} files). ` +
                'Consider breaking it into smaller PRs.'
              );
            }

            // Add comment summary
            const comment = `## PR Size Summary\n\n` +
              `- **Files changed:** ${fileCount}\n` +
              `- **Lines added:** ${additions}\n` +
              `- **Lines deleted:** ${deletions}\n` +
              `- **Total changes:** ${totalChanges}\n`;

            core.summary.addRaw(comment).write();

  pr-conflict-check:
    name: Check for Conflicts
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Check mergeable state
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });

            if (pr.mergeable_state === 'dirty') {
              core.setFailed('❌ PR has merge conflicts. Please resolve them.');
            } else if (pr.mergeable_state === 'unknown') {
              core.info('⏳ Merge status is being calculated...');
            } else {
              core.info('✅ No merge conflicts detected');
            }

  # Code Quality Jobs (run on all events)
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type check
        run: npx tsc --noEmit

  build:
    name: Build Application
    runs-on: ubuntu-latest

    strategy:
      matrix:
        build-type: [DEBUG, RELEASE]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application (${{ matrix.build-type }})
        env:
          REDIACC_BUILD_TYPE: ${{ matrix.build-type }}
          VITE_APP_VERSION: ${{ github.sha }}
          VITE_BASE_PATH: /
          NODE_ENV: production
        run: npm run build

      - name: Check build output
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not created"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "Error: index.html not found in dist"
            exit 1
          fi
          echo "Build successful!"
          ls -lah dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.build-type }}-${{ github.sha }}
          path: dist/
          retention-days: 90

  test-api:
    name: API Integration Tests
    runs-on: ubuntu-latest
    if: false  # Enable when test-api.mjs is implemented

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run API tests
        run: node test-api.mjs

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Run npm audit
        run: npm audit --audit-level=moderate || true

      - name: Check for vulnerable dependencies
        run: |
          echo "Checking for known vulnerabilities..."
          npm audit --json > audit-report.json || true
          cat audit-report.json

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-${{ github.sha }}
          path: audit-report.json
          retention-days: 30

  bundle-size:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        env:
          REDIACC_BUILD_TYPE: RELEASE
          NODE_ENV: production
        run: npm run build

      - name: Analyze bundle size
        run: |
          echo "## Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Main Bundles" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          du -h dist/assets/js/*.js | sort -h >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Total Size" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          du -sh dist/ >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Check bundle size limits
        run: |
          TOTAL_SIZE=$(du -sb dist/ | cut -f1)
          MAX_SIZE=$((10 * 1024 * 1024))  # 10MB limit

          if [ $TOTAL_SIZE -gt $MAX_SIZE ]; then
            echo "::warning::Bundle size ($TOTAL_SIZE bytes) exceeds 10MB limit"
          else
            echo "Bundle size OK: $TOTAL_SIZE bytes"
          fi

  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, type-check, build, security-scan, bundle-size]
    if: always()

    steps:
      - name: Check job results
        run: |
          echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Type Check: ${{ needs.type-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Bundle Size: ${{ needs.bundle-size.result }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.type-check.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **CI Pipeline Failed**" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All CI Checks Passed**" >> $GITHUB_STEP_SUMMARY
          fi
